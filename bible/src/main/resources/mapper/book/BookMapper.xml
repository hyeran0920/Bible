<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">
<mapper namespace="com.library.bible.book.repository.IBookRepository">

	<select id="getBookCount" resultType="int">
		SELECT COUNT(*) FROM BOOK
		<!-- <choose>
			<when test="_parameter == null"></when>
			<when test="_parameter.containsKey('departmentId')">
				WHERE department_id=#{departmentId}
			</when>
			<when test="_parameter.containsKey('jobId')">
				WHERE job_id=#{jobId}
			</when>
			<otherwise></otherwise>
		</choose>	 -->	
	</select>

	
	<select id="getBookListMap" resultType="hashmap">
	    SELECT  book_id          AS "bookId",
	            book_title       AS "bookTitle",
	            book_author      AS "bookAuthor",
	            book_publisher   AS "bookPublisher",
	            TO_CHAR(book_release_date, 'YYYY-MM-DD') AS "bookReleaseDate",
	            book_category    AS "bookCategory",
	            book_price       AS "bookPrice",
	            book_img         AS "bookImg",
	            book_detail      AS "bookDetail",
	            book_total_stock AS "bookTotalStock",
	            book_rent_stock  AS "bookRentStock",
	            book_location 	 AS "bookLocation"
	    FROM BOOK
	</select>
	
	<select id="getBookInfoMap" parameterType="int" resultType="hashmap">
	    SELECT  book_id          AS "bookId",
	            book_title       AS "bookTitle",
	            book_author      AS "bookAuthor",
	            book_publisher   AS "bookPublisher",
	            TO_CHAR(book_release_date, 'YYYY-MM-DD') AS "bookReleaseDate",
	            book_category    AS "bookCategory",
	            book_price       AS "bookPrice",
	            book_img         AS "bookImg",
	            book_detail      AS "bookDetail",
	            book_total_stock AS "bookTotalStock",
	            book_rent_stock  AS "bookRentStock",
	            book_location 	 AS "bookLocation"
	    FROM BOOK 
	    WHERE book_id = #{bookId}
	</select>
	
	<resultMap type="com.library.bible.book.model.Book" id="bookMap">
	    <result column="book_id"          property="bookId" />
	    <result column="book_title"       property="bookTitle" />
	    <result column="book_author"      property="bookAuthor" />
	    <result column="book_publisher"   property="bookPublisher" />
	    <result column="book_release_date" property="bookReleaseDate" />
	    <result column="book_category"    property="bookCategory" />
	    <result column="book_price"       property="bookPrice" />
	    <result column="book_img"         property="bookImg" />
	    <result column="book_detail"      property="bookDetail" />
	    <result column="book_total_stock" property="bookTotalStock"/>
	    <result column="book_rent_stock"  property="bookRentStock"/>
	    <result column="book_location"    property="bookLocation"/>
	</resultMap>
	
	<select id="getBookList" resultMap="bookMap">
	    SELECT * FROM BOOK
	</select>
	
	<select id="getBookInfo" parameterType="int" resultType="com.library.bible.book.model.Book">
	    SELECT  book_id          AS bookId,
	            book_title       AS bookTitle,
	            book_author      AS bookAuthor,
	            book_publisher   AS bookPublisher,
	            book_release_date AS bookReleaseDate,
	            book_category    AS bookCategory,
	            book_price       AS bookPrice,
	            book_img         AS bookImg,
	            book_detail      AS bookDetail,
	            book_total_stock AS "bookTotalStock",
	            book_rent_stock  AS "bookRentStock",
	            book_location 	 AS "bookLocation"
	    FROM BOOK 
	    WHERE book_id = #{bookId}
	</select>
	
	<insert id="insertBook" parameterType="com.library.bible.book.model.Book">
	    <!-- book_id를 먼저 가져오기 (자동증가) -->
	    <selectKey keyProperty="bookId" resultType="int" order="BEFORE">
	        SELECT book_seq.NEXTVAL FROM dual
	    </selectKey>
	
	    <!-- BOOK 테이블에 데이터 삽입 -->
	    INSERT INTO book 
	        (book_id, book_title, book_author, book_publisher, book_release_date, 
	         book_category, book_price, book_img, book_detail, 
	         book_total_stock, book_rent_stock, book_location)
	    VALUES 
	        (#{bookId}, #{bookTitle}, #{bookAuthor}, #{bookPublisher}, #{bookReleaseDate}, 
	         #{bookCategory}, #{bookPrice}, #{bookImg}, #{bookDetail}, 
	         #{bookTotalStock}, #{bookRentStock}, #{bookLocation})
	</insert>


    
	
	<update id="updateBook" parameterType="com.library.bible.book.model.Book">
	    UPDATE BOOK
	    SET book_title = #{bookTitle},
	        book_author = #{bookAuthor},
	        book_publisher = #{bookPublisher},
	        book_release_date = #{bookReleaseDate, jdbcType=DATE},
	        book_category = #{bookCategory},
	        book_price = #{bookPrice},
	        book_detail = #{bookDetail},
	        book_total_stock=#{bookTotalStock},
	        book_rent_stock=#{bookRentStock},
	        book_location=#{bookLocation}
	    WHERE book_id = #{bookId}
	</update>

	
	<delete id="deleteBook">
	    DELETE FROM BOOK 
	    WHERE book_id = #{param1}
	    <!-- WHERE book_id = #{param1} AND book_author = #{param2} -->
	</delete>
	
	<select id="getAllAuthor" resultType="hashmap">
	    SELECT DISTINCT book_author AS "bookAuthor" FROM BOOK
	</select>
	
	<select id="getAllPublisher" resultType="hashmap">
	    SELECT DISTINCT book_publisher AS "bookPublisher" FROM BOOK
	</select>
	
	<select id="getAllCategory" resultType="hashmap">
	    SELECT DISTINCT book_category AS "bookCategory"
	    FROM BOOK
	    WHERE book_category IS NOT NULL
	</select>
	
	<select id="getBooksByCategory" resultType="map">
		SELECT  book_id          AS "bookId",
	            book_title       AS "bookTitle",
	            book_author      AS "bookAuthor",
	            book_publisher   AS "bookPublisher",
	            TO_CHAR(book_release_date, 'YYYY-MM-DD') AS "bookReleaseDate",
	            book_category    AS "bookCategory",
	            book_price       AS "bookPrice",
	            book_img         AS "bookImg",
	            book_detail      AS "bookDetail",
	            book_total_stock AS "bookTotalStock",
	            book_rent_stock  AS "bookRentStock",
	            book_location 	 AS "bookLocation"
	    FROM BOOK
	    WHERE BOOK_CATEGORY=#{category}
	</select>

	<select id="searchBooks" resultType="hashmap">
		<![CDATA[
			SELECT  book_id          AS "bookId",
		            book_title       AS "bookTitle",
		            book_author      AS "bookAuthor",
		            book_publisher   AS "bookPublisher",
		            TO_CHAR(book_release_date, 'YYYY-MM-DD') AS "bookReleaseDate",
		            book_category    AS "bookCategory",
		            book_price       AS "bookPrice",
		            book_img         AS "bookImg",
		            book_detail      AS "bookDetail",
		            book_total_stock AS "bookTotalStock",
		            book_rent_stock  AS "bookRentStock",
		            book_location 	 AS "bookLocation"
		    FROM BOOK
		    WHERE 1=1
		]]>
		<if test="keyword != null and keyword != ''">
			AND (
				LOWER(REPLACE(book_title, ' ', '')) LIKE LOWER('%' || REPLACE(#{keyword}, ' ', '') || '%')
				OR LOWER(REPLACE(book_author, ' ', '')) LIKE LOWER('%' || REPLACE(#{keyword}, ' ', '') || '%')
				OR LOWER(REPLACE(book_publisher, ' ', '')) LIKE LOWER('%' || REPLACE(#{keyword}, ' ', '') || '%')
			)
		</if>
	</select>


	
</mapper>